// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Define the Prisma client generator
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

// Define the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the DBML generator
generator dbml {
  provider = "prisma-dbml-generator"
}

// Define the Account model
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_in               Int?
  ext_expires_in           Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Define the Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the User model
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  dashboards    Dashboard[]
}

// Define the VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Define the Dashboard model
model Dashboard {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  published           Boolean
  version             Int                  @default(1)
  dashboardIterations DashboardIteration[]
  thumbnailPath       String
  grafanaJSON         Json
  grafanaUrl          String?
  columns             Int                  @default(2)
  tags                String[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  panels              Panel[]
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
}

// Define the DashboardIteration model
model DashboardIteration {
  id          String    @id @default(cuid())
  version     Int       @default(1)
  grafanaJSON Json
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  dashboardId String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

// Define the Panel model
model Panel {
  id            String    @id @default(cuid())
  name          String
  description   String?
  thumbnailPath String
  grafanaJSON   Json
  grafanaUrl    String?
  width         Int       @default(1)
  position      Int       @default(1)
  type          String
  properties    Json?
  dashboard     Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  dashboardId   String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}
